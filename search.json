[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "T2T Dog Genomes – 2025",
    "section": "",
    "text": "This report summarizes six long-read assemblies (HiFi), scaffolding with RagTag, Liftoff annotations, and a pangenome context via Panagram.\n\n\n\n\n\n\nNote\n\n\n\nRendered with Quarto as a multi-chapter “book.” Cross-links and section numbering are automatic.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Executive Summary</span>"
    ]
  },
  {
    "objectID": "01_methods.html",
    "href": "01_methods.html",
    "title": "2  Methods & Inputs",
    "section": "",
    "text": "Assemblies: hifiasm (HiFi), then RagTag scaffolding vs UU_Cfam_GSD_1.0_ROSY.\nAnnotation: Liftoff from UU_Cfam_GSD_1.0_ROSY RefSeq/Ensembl-format GTF.\nPangenome: Panagram index (k=31), anchors, distances.\n\nData live under /data/mschatz1/t2t-dogs/2025.07.17.Zeke/HiFi/${DOG}/...\nReport reads precomputed TSVs/GFF3s (fast, reproducible renders using Quarto’s freeze).",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Methods & Inputs</span>"
    ]
  },
  {
    "objectID": "02_assemblies.html",
    "href": "02_assemblies.html",
    "title": "3  Contig Assemblies (hifiasm)",
    "section": "",
    "text": "3.1 What this chapter shows\nWe summarize contig-level assemblies produced by hifiasm (primary, hap1, hap2). We report N50/L50-style contiguity and total size, then visualize cross-dog differences. N50 is a weighted median contig length such that 50% of the assembly is in contigs ≥ N50; NG50 is the same concept but uses an expected genome size as the denominator (useful for between-assembly comparisons).",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Contig Assemblies (hifiasm)</span>"
    ]
  },
  {
    "objectID": "02_assemblies.html#what-this-chapter-shows",
    "href": "02_assemblies.html#what-this-chapter-shows",
    "title": "3  Contig Assemblies (hifiasm)",
    "section": "",
    "text": "Notes\n- Domestic dog (Canis familiaris) nuclear genome is ~2.4–2.5 Gb; we use 2.45 Gb as a default expected size for NG-metrics. - hifiasm generates primary and haplotype-resolved contigs (hap1, hap2) from HiFi data, enabling direct comparison of maternal/paternal assemblies.\n\n\n\n\n\n\n\nTip\n\n\n\nWe keep scaffolding (RagTag) and annotation (Liftoff) in later chapters so this section reflects raw contiguity from hifiasm.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Contig Assemblies (hifiasm)</span>"
    ]
  },
  {
    "objectID": "02_assemblies.html#summary-table",
    "href": "02_assemblies.html#summary-table",
    "title": "3  Contig Assemblies (hifiasm)",
    "section": "3.2 Summary Table",
    "text": "3.2 Summary Table\nThese come from your linking script (data/*_{hap1|hap2|primary}.stats.tsv) and contain: num, sum, n50, max, mean.\n\n\nCode\nimport pandas as pd\n\nasm = pd.read_csv(\"data/assemblies.tsv\", sep=\"\\t\")\n# Human-friendly labels\nlabel_map = {\"p_ctg\":\"primary\", \"hap1.p_ctg\":\"hap1\", \"hap2.p_ctg\":\"hap2\"}\nasm[\"assembly\"] = asm[\"assembly\"].map(label_map).fillna(asm[\"assembly\"])\n\n# Normalize dog names (lowercase → Title)\nasm[\"dog\"] = asm[\"dog\"].str.title()\n\n# Order columns\nasm = asm[[\"dog\",\"assembly\",\"contigs\",\"length_bp\",\"n50_bp\",\"max_bp\",\"mean_bp\"]]\nasm.sort_values([\"dog\",\"assembly\"], inplace=True)\nasm\n\nasm_summary = (asm\n  .assign(length_Gb=lambda d: d[\"length_bp\"]/1e9,\n          n50_Mb=lambda d: d[\"n50_bp\"]/1e6,\n          max_Mb=lambda d: d[\"max_bp\"]/1e6,\n          mean_kb=lambda d: d[\"mean_bp\"]/1e3)\n  [[\"dog\",\"assembly\",\"contigs\",\"length_Gb\",\"n50_Mb\",\"max_Mb\",\"mean_kb\"]]\n  .rename(columns={\"length_Gb\":\"length (Gb)\",\"n50_Mb\":\"N50 (Mb)\",\"max_Mb\":\"max (Mb)\",\"mean_kb\":\"mean (kb)\"}))\nasm_summary\n\n\n\n\n\n\n\n\n\ndog\nassembly\ncontigs\nlength (Gb)\nN50 (Mb)\nmax (Mb)\nmean (kb)\n\n\n\n\n1\nAppa\nhap1\n119\n2.418026\n55.151629\n123.265682\n20319.5437\n\n\n2\nAppa\nhap2\n109\n2.369512\n54.720232\n123.504004\n21738.6466\n\n\n0\nAppa\nprimary\n83\n2.471283\n54.723395\n129.348512\n29774.4987\n\n\n4\nMolly\nhap1\n167\n2.433310\n53.708796\n123.888497\n14570.7164\n\n\n5\nMolly\nhap2\n140\n2.454928\n55.958338\n123.316267\n17535.2018\n\n\n3\nMolly\nprimary\n117\n2.474317\n63.049053\n123.888497\n21148.0099\n\n\n7\nNoodle\nhap1\n130\n2.446466\n57.963758\n123.335643\n18818.9729\n\n\n8\nNoodle\nhap2\n148\n2.315743\n57.921322\n92.319795\n15646.9100\n\n\n6\nNoodle\nprimary\n97\n2.469626\n63.224845\n123.517932\n25460.0583\n\n\n10\nOrfhlaith\nhap1\n137\n2.443127\n49.813152\n89.842402\n17833.0412\n\n\n11\nOrfhlaith\nhap2\n133\n2.448507\n53.631617\n123.560014\n18409.8266\n\n\n9\nOrfhlaith\nprimary\n106\n2.465162\n57.955801\n123.560035\n23256.2441\n\n\n13\nPandan\nhap1\n169\n2.323921\n50.290859\n101.016635\n13751.0093\n\n\n14\nPandan\nhap2\n249\n2.373947\n43.148106\n123.283190\n9533.9246\n\n\n12\nPandan\nprimary\n115\n2.468097\n54.673020\n123.283190\n21461.7101\n\n\n16\nZeke\nhap1\n173\n2.358435\n53.662931\n95.335571\n13632.5699\n\n\n17\nZeke\nhap2\n142\n2.370843\n57.981274\n104.955800\n16696.0788\n\n\n15\nZeke\nprimary\n98\n2.471667\n62.705175\n126.123749\n25221.0887",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Contig Assemblies (hifiasm)</span>"
    ]
  },
  {
    "objectID": "02_assemblies.html#headline-continuity-plots",
    "href": "02_assemblies.html#headline-continuity-plots",
    "title": "3  Contig Assemblies (hifiasm)",
    "section": "3.3 Headline continuity plots",
    "text": "3.3 Headline continuity plots\n\n\nCode\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nwanted = [\"primary\",\"hap1\",\"hap2\"]  \n# ---- Bar plot of N50 ----\nfig, ax = plt.subplots(figsize=(8,4))\npivot_n50 = (asm\n    .pivot(index=\"dog\", columns=\"assembly\", values=\"n50_bp\")\n    .reindex(sorted(asm[\"dog\"].unique()))\n    .reindex(columns=wanted) \n)\nx = np.arange(len(pivot_n50))\nw = 0.27\nfor i, col in enumerate(pivot_n50.columns):\n    ax.bar(x + i*w, pivot_n50[col]/1e6, width=w, label=col)\nax.set_xticks(x + w)\nax.set_xticklabels(pivot_n50.index, rotation=0)\nax.set_ylabel(\"N50 (Mb)\")\nax.set_title(\"Contig N50 by dog and haplotype\")\nax.legend()\nplt.tight_layout()\nplt.show()\n\n# ---- Total assembled size vs expected dog genome size ----\nexpected_bp = 2.45e9  # Canis familiaris ~2.4–2.5 Gb\nfig, ax = plt.subplots(figsize=(8,4))\npivot_sum = (asm\n    .pivot(index=\"dog\", columns=\"assembly\", values=\"length_bp\")\n    .reindex(sorted(asm[\"dog\"].unique()))\n    .reindex(columns=wanted)  \n)\nx = np.arange(len(pivot_sum)); w = 0.27\nfor i, col in enumerate(pivot_sum.columns):\n    ax.bar(x + i*w, pivot_sum[col]/1e9, width=w, label=col)\nax.axhline(expected_bp/1e9, linestyle=\"--\")\nax.set_xticks(x + w); ax.set_xticklabels(pivot_sum.index)\nax.set_ylabel(\"Assembly length (Gb)\")\nax.set_title(\"Total contig length vs expected dog genome size (~2.45 Gb)\")\nax.legend()\nplt.tight_layout()\nplt.show()\n\n# ---- Cumulative-length (lens) plots ----\nimport glob, re, math\n\ndef load_lens(path):\n    s = pd.read_csv(path, sep=r\"\\s+\", header=None, names=[\"len\"])\n    s = s.sort_values(\"len\", ascending=False).reset_index(drop=True)\n    s[\"cum\"] = s[\"len\"].cumsum()\n    return s\n\nlens_files = sorted(glob.glob(\"data/*_primary.fa.lens\") + glob.glob(\"data/*_hap1.fa.lens\") + glob.glob(\"data/*_hap2.fa.lens\"))\nif lens_files:\n    ncols = 3\n    nrows = math.ceil(len(lens_files)/ncols)\n    fig, axes = plt.subplots(nrows=nrows, ncols=ncols, figsize=(12, 3*nrows), squeeze=False)\n    for ax, f in zip(axes.flatten(), lens_files):\n        m = re.match(r\"data/([a-zA-Z0-9_-]+)_(primary|hap1|hap2)\\.fa\\.lens\", f)\n        if not m:  \n            ax.axis(\"off\"); ax.set_title(f\"Unrecognized: {f}\")\n            continue\n        dog, hap = m.group(1).title(), m.group(2)\n        df = load_lens(f)\n        total = df[\"len\"].sum()\n        ax.plot(range(1, len(df)+1), df[\"cum\"]/1e9)\n        ax.axhline(total*0.5/1e9, linestyle=\"--\")\n        ax.set_title(f\"{dog} {hap}\")\n        ax.set_xlabel(\"# contigs (sorted)\"); ax.set_ylabel(\"Cumulative length (Gb)\")\n    plt.tight_layout(); plt.show()",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Contig Assemblies (hifiasm)</span>"
    ]
  },
  {
    "objectID": "02_assemblies.html#nx-curves-and-area-under-nx-aun",
    "href": "02_assemblies.html#nx-curves-and-area-under-nx-aun",
    "title": "3  Contig Assemblies (hifiasm)",
    "section": "3.4 Nx curves and area-under-Nx (auN)",
    "text": "3.4 Nx curves and area-under-Nx (auN)\n\n\nCode\n# --- Nx curves split into two panels -------------------------------------\nimport glob, re, pandas as pd, matplotlib.pyplot as plt, numpy as np\n\ndef load_lengths(path):\n    s = pd.read_csv(path, sep=r\"\\s+\", header=None, names=[\"len\"])\n    return s[\"len\"].sort_values(ascending=False).to_numpy()\n\ndef nx_curve(lengths):\n    cs  = lengths.cumsum()\n    tot = cs[-1]\n    nx_vals = [lengths[cs &gt;= tot*(x/100)][0] for x in range(1,101)]\n    return np.arange(1,101), np.array(nx_vals)\n\ndef auN(nx_vals):          # area-under-Nx curve\n    return nx_vals.sum() / 100\n\n# collect curves\nlens_files = sorted(glob.glob(\"data/*_primary.fa.lens\") + glob.glob(\"data/*_hap1.fa.lens\") + glob.glob(\"data/*_hap2.fa.lens\"))\ncurves, summary = [], []\nfor f in lens_files:\n    m = re.match(r\".*/([A-Za-z]+)_(primary|hap1|hap2)\\.fa\\.lens\", f)\n    if not m:\n        continue\n    dog, asm = m.group(1).title(), m.group(2)\n    nx, vals = nx_curve(load_lengths(f))\n    curves.append((dog, asm, nx, vals))\n    summary.append({\"dog\":dog, \"assembly\":asm, \"auN_Mb\":auN(vals)/1e6})\n\nif not curves:\n    raise RuntimeError(\"No *.fa.lens files found; check your symlinks\")\n\n# split dogs 50 / 50\ndogs = sorted({d for d,_,_,_ in curves})\nmid  = len(dogs)//2\ngroups = [set(dogs[:mid]), set(dogs[mid:])]\n\nfor gidx, gset in enumerate(groups, start=1):\n    fig, ax = plt.subplots(figsize=(7,5))\n    for dog, asm, nx, vals in curves:\n        if dog not in gset:          # skip dogs not in this half\n            continue\n        ls = \"-\" if asm==\"primary\" else \"--\" if asm==\"hap1\" else \":\"\n        ax.plot(nx, vals/1e6, ls, label=f\"{dog} {asm}\")\n    ax.set_xlabel(\"x in Nx (%)\")\n    ax.set_ylabel(\"Contig length (Mb)\")\n    ax.set_title(f\"Nx curves — group {gidx} / 2  (higher & right = more contiguous)\")\n    ax.legend(fontsize=8, ncol=2)\n    plt.tight_layout(); plt.show()\n\n# --- auN summary table (unchanged) ---------------------------------------\nauN_df = (pd.DataFrame(summary)\n          .pivot(index=\"dog\", columns=\"assembly\", values=\"auN_Mb\")\n          .reindex(columns=[\"primary\",\"hap1\",\"hap2\"]))\nauN_df.round(1)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nassembly\nprimary\nhap1\nhap2\n\n\ndog\n\n\n\n\n\n\n\nAppa\n63.6\n56.5\n58.1\n\n\nMolly\n62.1\n55.7\n58.1\n\n\nNoodle\n61.8\n58.0\n55.1\n\n\nOrfhlaith\n60.5\n49.2\n55.3\n\n\nPandan\n58.3\n51.7\n49.4\n\n\nZeke\n67.1\n53.0\n56.2",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Contig Assemblies (hifiasm)</span>"
    ]
  },
  {
    "objectID": "03_scaffolding.html",
    "href": "03_scaffolding.html",
    "title": "4  Scaffold Assemblies (RagTag)",
    "section": "",
    "text": "4.1 What this chapter shows\nWe summarise scaffold-level assemblies produced with RagTag using GSD v1.0 as the reference.\nFigures mirror those in 02 Assemblies so you can see before-versus-after gains in continuity.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Scaffold Assemblies (RagTag)</span>"
    ]
  },
  {
    "objectID": "03_scaffolding.html#what-this-chapter-shows",
    "href": "03_scaffolding.html#what-this-chapter-shows",
    "title": "4  Scaffold Assemblies (RagTag)",
    "section": "",
    "text": "Expected dog genome size ≈ 2.45 Gb (2.4–2.5 Gb).\nIdeal assembly has 39–40 scaffolds (38 autosomes + X/Y).",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Scaffold Assemblies (RagTag)</span>"
    ]
  },
  {
    "objectID": "03_scaffolding.html#summary-table",
    "href": "03_scaffolding.html#summary-table",
    "title": "4  Scaffold Assemblies (RagTag)",
    "section": "4.2 Summary Table",
    "text": "4.2 Summary Table\nThe *.scaf.stats.tsv files are single-line outputs from RagTag.\nThey live in data/scaffold/ along with the .scaf.fa.lens length files.\n\n\nCode\nimport glob, re, sys, pathlib, pandas as pd, numpy as np\nfrom IPython.display import display\nimport matplotlib.pyplot as plt\n\nSTAT_DIR = pathlib.Path(\"data/scaffold\")\nstat_files = glob.glob(str(STAT_DIR / \"*.scaf.stats.tsv\"))\nif not stat_files:\n    sys.exit(f\"[ERROR] No scaffold stats found in {STAT_DIR}\")\n\nPAT = re.compile(rf\"{STAT_DIR}/([A-Za-z]+)_(primary|hap1|hap2)\\.scaf\\.stats\\.tsv$\")\n\nrecords = []\nfor f in stat_files:\n    m = PAT.match(f)\n    if not m:\n        continue\n    dog, asm = m.groups()\n    with open(f) as fh:\n        kv = dict(re.findall(r\"(\\w+)=([\\d.]+)\", fh.readline()))\n    records.append(dict(\n        dog      = dog.title(),\n        assembly = asm,\n        sum      = int(kv[\"sum\"]),\n        n50      = int(kv[\"n50\"]),\n        Ns       = int(kv.get(\"Ns\", 0)),\n        gaps     = int(kv.get(\"gaps\", 0))\n    ))\n\nscaf = pd.DataFrame(records)\nscaf[\"assembly\"]  = pd.Categorical(scaf[\"assembly\"], [\"primary\",\"hap1\",\"hap2\"], ordered=True)\nscaf[\"length_Gb\"] = scaf[\"sum\"]/1e9\nscaf[\"N50_Mb\"]    = scaf[\"n50\"]/1e6\nscaf[\"Ns_pct\"]    = 100*scaf[\"Ns\"]/scaf[\"sum\"]\nscaf = scaf.sort_values([\"dog\",\"assembly\"])\n\ntbl = (scaf[[\"dog\",\"assembly\",\"length_Gb\",\"N50_Mb\",\"gaps\",\"Ns_pct\"]]\n       .round({\"length_Gb\":2,\"N50_Mb\":1,\"Ns_pct\":2})\n       .rename(columns={\"length_Gb\":\"length (Gb)\",\"N50_Mb\":\"N50 (Mb)\",\n                        \"gaps\":\"# gaps\",\"Ns_pct\":\"% N\"}))\ndisplay(tbl)\n\n\n\n\n\n\n\n\n\ndog\nassembly\nlength (Gb)\nN50 (Mb)\n# gaps\n% N\n\n\n\n\n12\nAppa\nprimary\n2.47\n66.1\n0\n0.0\n\n\n10\nAppa\nhap1\n2.42\n65.7\n0\n0.0\n\n\n1\nAppa\nhap2\n2.37\n64.0\n0\n0.0\n\n\n16\nMolly\nprimary\n2.47\n66.0\n0\n0.0\n\n\n2\nMolly\nhap1\n2.43\n65.8\n0\n0.0\n\n\n14\nMolly\nhap2\n2.45\n65.6\n0\n0.0\n\n\n0\nNoodle\nprimary\n2.47\n65.7\n0\n0.0\n\n\n9\nNoodle\nhap1\n2.45\n65.7\n0\n0.0\n\n\n15\nNoodle\nhap2\n2.32\n63.6\n0\n0.0\n\n\n6\nOrfhlaith\nprimary\n2.47\n65.7\n0\n0.0\n\n\n4\nOrfhlaith\nhap1\n2.44\n64.4\n0\n0.0\n\n\n17\nOrfhlaith\nhap2\n2.45\n65.5\n0\n0.0\n\n\n5\nPandan\nprimary\n2.47\n65.6\n0\n0.0\n\n\n8\nPandan\nhap1\n2.32\n64.7\n0\n0.0\n\n\n3\nPandan\nhap2\n2.37\n65.5\n0\n0.0\n\n\n11\nZeke\nprimary\n2.47\n66.1\n0\n0.0\n\n\n7\nZeke\nhap1\n2.36\n64.6\n0\n0.0\n\n\n13\nZeke\nhap2\n2.37\n63.0\n0\n0.0",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Scaffold Assemblies (RagTag)</span>"
    ]
  },
  {
    "objectID": "03_scaffolding.html#headline-continuity-plots",
    "href": "03_scaffolding.html#headline-continuity-plots",
    "title": "4  Scaffold Assemblies (RagTag)",
    "section": "4.3 Headline continuity plots",
    "text": "4.3 Headline continuity plots\n\n\nCode\nimport numpy as np, seaborn as sns\nwanted = [\"primary\",\"hap1\",\"hap2\"]\n\n# --- Bar: Scaffold N50 ------------------------------------------------\nfig, ax = plt.subplots(figsize=(8,4))\npivot = (scaf.pivot(index=\"dog\", columns=\"assembly\", values=\"N50_Mb\")\n              .reindex(sorted(scaf[\"dog\"].unique()))\n              .reindex(columns=wanted))\nx = np.arange(len(pivot)); w = 0.27\nfor i, col in enumerate(pivot.columns):\n    ax.bar(x+i*w, pivot[col], width=w, label=col)\nax.set_xticks(x+w); ax.set_xticklabels(pivot.index)\nax.set_ylabel(\"Scaffold N50 (Mb)\")\nax.set_title(\"Scaffold N50 by dog and haplotype\")\nax.legend(); plt.tight_layout(); plt.show()\n\n# --- Bar: Total scaffold length vs 2.45 Gb ---------------------------\nfig, ax = plt.subplots(figsize=(8,4))\npivot = (scaf.pivot(index=\"dog\", columns=\"assembly\", values=\"length_Gb\")\n              .reindex(sorted(scaf[\"dog\"].unique()))\n              .reindex(columns=wanted))\nfor i, col in enumerate(pivot.columns):\n    ax.bar(x+i*w, pivot[col], width=w, label=col)\nax.axhline(2.45, ls=\"--\", color=\"grey\")\nax.set_xticks(x+w); ax.set_xticklabels(pivot.index)\nax.set_ylabel(\"Scaffolded length (Gb)\")\nax.set_title(\"Total scaffold length vs expected genome size (2.45 Gb)\")\nax.legend(); plt.tight_layout(); plt.show()\n\n#| label: cumulative-length\n#| results: \"show\"\n# ---- Cumulative-length (lens) plots for scaffolds --------------------\nimport glob, re, math, pandas as pd, matplotlib.pyplot as plt\n\ndef load_lens(path):\n    df = pd.read_csv(path, sep=r\"\\s+\", header=None, names=[\"len\"])\n    df = df.sort_values(\"len\", ascending=False).reset_index(drop=True)\n    df[\"cum\"] = df[\"len\"].cumsum()\n    return df\n\nLENS_DIR   = \"data/scaffold\"\nlens_files = sorted(\n    glob.glob(f\"{LENS_DIR}/*_primary.scaf.fa.lens\") +\n    glob.glob(f\"{LENS_DIR}/*_hap1.scaf.fa.lens\")   +\n    glob.glob(f\"{LENS_DIR}/*_hap2.scaf.fa.lens\")\n)\n\nif lens_files:\n    ncols  = 3\n    nrows  = math.ceil(len(lens_files) / ncols)\n    fig, axes = plt.subplots(nrows=nrows, ncols=ncols,\n                             figsize=(12, 3 * nrows), squeeze=False)\n\n    for ax, f in zip(axes.flatten(), lens_files):\n        m = re.match(r\".*/([A-Za-z0-9_-]+)_(primary|hap1|hap2)\\.scaf\\.fa\\.lens\", f)\n        if not m:        # unexpected filename\n            ax.axis(\"off\"); ax.set_title(f\"Unrecognized: {f}\")\n            continue\n        dog, asm = m.group(1).title(), m.group(2)\n        df  = load_lens(f)\n        tot = df[\"len\"].sum()\n\n        ax.plot(range(1, len(df) + 1), df[\"cum\"] / 1e9)\n        ax.axhline(tot * 0.5 / 1e9, ls=\"--\")        # 50 % line\n        ax.set_title(f\"{dog} {asm}\")\n        ax.set_xlabel(\"# scaffolds (sorted)\")\n        ax.set_ylabel(\"Cumulative length (Gb)\")\n\n    # Hide any empty subplots\n    for extra_ax in axes.flatten()[len(lens_files):]:\n        extra_ax.axis(\"off\")\n\n    plt.tight_layout(); plt.show()\nelse:\n    print(\"No *.scaf.fa.lens files found in data/scaffold/\")",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Scaffold Assemblies (RagTag)</span>"
    ]
  },
  {
    "objectID": "03_scaffolding.html#nx-curves-and-area-under-nx-aun",
    "href": "03_scaffolding.html#nx-curves-and-area-under-nx-aun",
    "title": "4  Scaffold Assemblies (RagTag)",
    "section": "4.4 Nx curves and area-under-Nx (auN)",
    "text": "4.4 Nx curves and area-under-Nx (auN)\n\n\nCode\nimport math, numpy as np\n\ndef load_lens(path):\n    arr = np.loadtxt(path, dtype=int)\n    return np.sort(arr)[::-1]\n\ndef nx_curve(arr):\n    cs, tot = arr.cumsum(), arr.sum()\n    return np.array([arr[cs &gt;= tot*x/100][0] for x in range(1,101)])\n\nLENS_DIR  = STAT_DIR\nlens_files = sorted(glob.glob(str(LENS_DIR / \"*.scaf.fa.lens\")))\ncurves, summary = [], []\nfor f in lens_files:\n    m = re.match(r\".*/([A-Za-z]+)_(primary|hap1|hap2)\\.scaf\\.fa\\.lens\", f)\n    if not m: continue\n    dog, asm = m.groups(); dog = dog.title()\n    arr = load_lens(f); nx = nx_curve(arr)\n    curves.append((dog, asm, nx))\n    summary.append({\"dog\":dog,\"assembly\":asm,\"auN_Mb\":nx.sum()/100/1e6})\n\n# split dogs into two groups for legible plots\ndogs = sorted({d for d,_,_ in curves}); mid=len(dogs)//2\nfor group, dset in enumerate([dogs[:mid], dogs[mid:]], start=1):\n    plt.figure(figsize=(7,5))\n    for dog, asm, nx in curves:\n        if dog not in dset: continue\n        ls = \"-\" if asm==\"primary\" else \"--\" if asm==\"hap1\" else \":\"\n        plt.plot(range(1,101), nx/1e6, ls, label=f\"{dog} {asm}\")\n    plt.xlabel(\"x in Nx (%)\"); plt.ylabel(\"Length (Mb)\")\n    plt.title(f\"Nx curves — group {group}/2 (scaffolds)\")\n    plt.legend(fontsize=8, ncol=2); plt.tight_layout(); plt.show()\n\ndisplay(pd.DataFrame(summary)\n        .pivot(index=\"dog\", columns=\"assembly\", values=\"auN_Mb\")\n        .reindex(columns=wanted)\n        .round(1))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nassembly\nprimary\nhap1\nhap2\n\n\ndog\n\n\n\n\n\n\n\nAppa\n72.6\n66.9\n65.4\n\n\nMolly\n70.2\n68.7\n68.2\n\n\nNoodle\n69.6\n69.5\n65.3\n\n\nOrfhlaith\n69.7\n69.3\n68.8\n\n\nPandan\n70.4\n65.8\n68.1\n\n\nZeke\n69.4\n66.1\n65.5",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Scaffold Assemblies (RagTag)</span>"
    ]
  },
  {
    "objectID": "04_annotation.html",
    "href": "04_annotation.html",
    "title": "5  Genome Annotation Transfer (Liftoff)",
    "section": "",
    "text": "5.1 Summary Table\nCode\nimport pandas as pd, seaborn as sns, matplotlib.pyplot as plt\nfrom IPython.display import display\n\n# ------------------------------------------------------------------\n# 1. read & harmonise column names / labels\n# ------------------------------------------------------------------\nlift = pd.read_csv(\"data/liftoff_summary.tsv\", sep=\"\\t\")\n\n# Convert haplotype → assembly label we want in plots\nlift[\"assembly\"] = (lift[\"haplotype\"]\n                      .str.replace(\"_scaffold\", \"\", regex=False)   # drop suffix\n                      .str.replace(\"hap\", \"hap\",  regex=False))    # hap1_scaffold → hap1\n\n# optional: if you later add primary rows, this keeps order stable\nlift[\"assembly\"] = pd.Categorical(lift[\"assembly\"],\n                                  categories=[\"primary\", \"hap1\", \"hap2\"],\n                                  ordered=True)\n\nlift[\"dog\"] = lift[\"dog\"].str.title()          # Appa → Appa\n\n# ------------------------------------------------------------------\n# 2. quick table\n# ------------------------------------------------------------------\nlift_tbl = (lift\n   .assign(pct_mapped = 100*lift[\"genes_mapped\"] /\n                       (lift[\"genes_mapped\"] + lift[\"unmapped_genes\"]))\n   [[\"dog\",\"assembly\",\"genes_mapped\",\"unmapped_genes\",\"pct_mapped\"]]\n   .round({\"pct_mapped\":1}))\ndisplay(lift_tbl)\n\n# ------------------------------------------------------------------\n# 3. % mapped bar plot\n# ------------------------------------------------------------------\nsns.barplot(data=lift, x=\"dog\",\n            y=lift[\"genes_mapped\"] /\n              (lift[\"genes_mapped\"]+lift[\"unmapped_genes\"]),\n            hue=\"assembly\")\nplt.ylabel(\"% reference genes mapped\")\nplt.ylim(0,1)\nplt.title(\"Liftoff annotation transfer success\")\nplt.tight_layout(); plt.show()\n\n\n\n\n\n\n\n\n\ndog\nassembly\ngenes_mapped\nunmapped_genes\npct_mapped\n\n\n\n\n0\nAppa\nhap1\n41742\n1990\n95.4\n\n\n1\nAppa\nhap2\n41205\n2441\n94.4\n\n\n2\nMolly\nhap1\n41798\n1771\n95.9\n\n\n3\nMolly\nhap2\n41914\n1748\n96.0\n\n\n4\nNoodle\nhap1\n42091\n1629\n96.3\n\n\n5\nNoodle\nhap2\n40303\n3389\n92.2\n\n\n6\nOrfhlaith\nhap1\n42147\n1610\n96.3\n\n\n7\nOrfhlaith\nhap2\n42148\n1672\n96.2\n\n\n8\nPandan\nhap1\n40585\n3092\n92.9\n\n\n9\nPandan\nhap2\n40386\n3411\n92.2\n\n\n10\nZeke\nhap1\n40651\n3074\n93.0\n\n\n11\nZeke\nhap2\n41198\n2543\n94.2",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Genome Annotation Transfer (Liftoff)</span>"
    ]
  },
  {
    "objectID": "04_annotation.html#mising-genes-ontology",
    "href": "04_annotation.html#mising-genes-ontology",
    "title": "5  Genome Annotation Transfer (Liftoff)",
    "section": "5.2 Mising Genes Ontology",
    "text": "5.2 Mising Genes Ontology\n\n\nCode\n# --- 1 · unmapped-gene lists -------------------------------------------------\nimport glob, re, pandas as pd, matplotlib.pyplot as plt, seaborn as sns, textwrap\nfrom IPython.display import Markdown, display\nfrom pathlib import Path\nimport urllib.request, sys\n\nrx = re.compile(r\"data/liftoff/([A-Za-z]+)_(hap[12])(?:_scaffold)?_unmapped\\.txt\")\nrecords = []\nfor p in glob.glob(\"data/liftoff/*_unmapped.txt\"):\n    m = rx.match(p)\n    if m:\n        with open(p) as fh:\n            records += [{\"dog\": m[1].title(), \"assembly\": m[2], \"gene\": g.strip()}\n                         for g in fh]\n\nunmapped = pd.DataFrame(records)\nif unmapped.empty:\n    display(Markdown(\"**All reference genes mapped – no enrichment to run.**\"))\n    sys.exit()\n\n# --- 2 · reference mapping (gene → GO) --------------------------------------\ngene2go = pd.read_csv(\"data/ref_gene2go.tsv\", sep=\"\\t\",\n                      names=[\"gene\", \"go\"], dtype=str)\ngene2go_dict = (gene2go.groupby(\"gene\")[\"go\"].apply(set).to_dict())\n\n# --- 3 · GO enrichment ------------------------------------------------------\n\nimport contextlib, io\n\n@contextlib.contextmanager\ndef quiet_stdout():\n    \"\"\"Temporarily suppress stdout (e.g. goatools chatter).\"\"\"\n    buf = io.StringIO()\n    with contextlib.redirect_stdout(buf):\n        yield\nfrom goatools.obo_parser import GODag\nfrom goatools.go_enrichment import GOEnrichmentStudy\n\nobo = Path(\"data/go/go-basic.obo\")\nif not obo.exists():\n    obo.parent.mkdir(parents=True, exist_ok=True)\n    urllib.request.urlretrieve(\n        \"https://current.geneontology.org/ontology/go-basic.obo\", obo\n    )\n\nwith quiet_stdout():\n    go_dag = GODag(str(obo))\n\nrows = []\nfor (dog, asm), df in unmapped.groupby([\"dog\", \"assembly\"]):\n    study = set(df[\"gene\"])\n    pop   = set(gene2go[\"gene\"])\n    with quiet_stdout():\n        goea  = GOEnrichmentStudy(pop, gene2go_dict, go_dag,\n                                methods=[\"fdr_bh\"], alpha=0.05, prt=None)\n        sig   = [r for r in goea.run_study(study) if r.p_fdr_bh &lt; 0.05]\n        for r in sig[:10]:                       # keep top 10 per set\n            rows.append({\"dog\": dog, \"assembly\": asm,\n                        \"GO\": r.GO, \"desc\": r.name,\n                        \"pct_study\": 100*r.ratio_in_study[0]/r.ratio_in_study[1],\n                        \"p_FDR\": r.p_fdr_bh})\n\nenrich = pd.DataFrame(rows)\n\n# --- 4a · tabbed paged table of unmapped genes ------------------------------\nmd = [\"::: {.panel-tabset}\\n\"]\nfor dog in sorted(unmapped[\"dog\"].unique()):\n    md += [f\"#### {dog}\\n\"]\n    tbl = (unmapped.loc[unmapped[\"dog\"] == dog]\n           .pivot_table(index=\"gene\", columns=\"assembly\", aggfunc=\"size\",\n                        fill_value=0)\n           .replace({0: \"✓\", 1: \"✗\"})\n           .sort_index()\n           .head(50))                       # first 50 genes\n    md += [tbl.to_markdown(), \"\"]\nmd += [\":::\"]\ndisplay(Markdown(\"#### First 50 Genes missing in one or both haplotypes\"))\ndisplay(Markdown(\"\\n\".join(md)))\n\n# --- 4b · GO-term × (dog-hap) presence table --------------------------------\nif not enrich.empty:\n    enrich[\"set\"] = enrich[\"dog\"] + \"-\" + enrich[\"assembly\"]\n    heat = (enrich.pivot_table(index=\"desc\", columns=\"set\",\n                               aggfunc=\"size\", fill_value=0)\n                  .replace({0: \"\", 1: \"✗\"})\n                  .sort_index())\n    display(Markdown(\"#### Enriched GO terms among unmapped genes across all dogs / haplotypes\"))\n    display(heat)                        \n\n# --- 4c · bar-plots of top terms -------------------------------------------\nif not enrich.empty:\n    enrich[\"desc_wrapped\"] = enrich[\"desc\"].apply(\n        lambda s: \"\\n\".join(textwrap.wrap(s, 35))\n    )\n    top = (enrich.sort_values(\"p_FDR\")\n                 .groupby([\"dog\", \"assembly\"])\n                 .head(5))               # top 5 per dog × hap\n\n    g = sns.catplot(data=top,\n                    x=\"pct_study\", y=\"desc_wrapped\",\n                    hue=\"assembly\", col=\"dog\",\n                    col_wrap=3, sharey=False,\n                    height=4.8, aspect=1.2,\n                    palette=\"Set2\", kind=\"bar\")\n\n    g.set_titles(\"{col_name}\")\n    g.set_xlabels(\"% of unmapped genes\")\n    g.set_ylabels(\"\")\n    g.fig.subplots_adjust(top=0.9)\n    g.fig.suptitle(\"Top enriched 5 GO terms among unmapped genes\",\n                   fontsize=14, weight=\"bold\")\n    plt.show()\n\n\ndata/go/go-basic.obo: fmt(1.2) rel(2025-07-22) 43,230 Terms\nPropagating term counts up: is_a\nPropagating term counts up: is_a\nPropagating term counts up: is_a\nPropagating term counts up: is_a\nPropagating term counts up: is_a\nPropagating term counts up: is_a\nPropagating term counts up: is_a\nPropagating term counts up: is_a\nPropagating term counts up: is_a\nPropagating term counts up: is_a\nPropagating term counts up: is_a\nPropagating term counts up: is_a\n\n\n5.2.0.1 First 50 Genes missing in one or both haplotypes\n\n\n\nAppaMollyNoodleOrfhlaithPandanZeke\n\n\n\n\n\ngene\nhap1\nhap2\n\n\n\n\nABCA7\n✗\n✓\n\n\nABCD1\n✓\n✗\n\n\nABCG2_2\n✗\n✗\n\n\nABHD17A\n✗\n✓\n\n\nACE2\n✗\n✓\n\n\nACOT9\n✗\n✓\n\n\nACSL4\n✓\n✗\n\n\nADAMTSL5\n✗\n✓\n\n\nADAT3\n✗\n✓\n\n\nADCY2\n✗\n✗\n\n\nADCY5\n✗\n✗\n\n\nADGRG2\n✗\n✓\n\n\nADGRG4\n✓\n✗\n\n\nADRM1\n✓\n✗\n\n\nAFF2\n✓\n✗\n\n\nAGTR2\n✓\n✗\n\n\nAIFM1\n✓\n✗\n\n\nAKAP14\n✓\n✗\n\n\nAKAP4\n✗\n✓\n\n\nALAS2\n✓\n✗\n\n\nAMELX\n✓\n✗\n\n\nAMER3\n✓\n✗\n\n\nAMMECR1\n✓\n✗\n\n\nAMOT\n✓\n✗\n\n\nANKRD26\n✓\n✗\n\n\nAP1S2\n✗\n✓\n\n\nAPC2\n✗\n✓\n\n\nAPEX2\n✓\n✗\n\n\nAPLN\n✓\n✗\n\n\nAPOOL\n✓\n✗\n\n\nAR\n✓\n✗\n\n\nARFGAP1\n✓\n✗\n\n\nARFRP1\n✓\n✗\n\n\nARHGAP36\n✓\n✗\n\n\nARHGAP4\n✓\n✗\n\n\nARHGAP45\n✗\n✓\n\n\nARHGAP6\n✓\n✗\n\n\nARHGEF26\n✗\n✗\n\n\nARHGEF6\n✓\n✗\n\n\nARHGEF9\n✓\n✗\n\n\nARID3A\n✗\n✓\n\n\nARL13A\n✓\n✗\n\n\nARMCX1\n✓\n✗\n\n\nARMCX2\n✓\n✗\n\n\nARMCX3\n✓\n✗\n\n\nARMCX4\n✓\n✗\n\n\nARMCX5\n✓\n✗\n\n\nARR3\n✓\n✗\n\n\nARX\n✗\n✓\n\n\nASB11\n✗\n✓\n\n\n\n\n\n\n\n\ngene\nhap1\nhap2\n\n\n\n\nABCA5\n✗\n✓\n\n\nABCA6\n✗\n✓\n\n\nABCA8\n✗\n✓\n\n\nABCA9\n✗\n✓\n\n\nABCG2_2\n✗\n✗\n\n\nABI3\n✓\n✗\n\n\nACE\n✗\n✓\n\n\nADCY2\n✗\n✗\n\n\nADCY5\n✓\n✗\n\n\nADNP\n✗\n✓\n\n\nAMH\n✓\n✗\n\n\nAMZ2\n✗\n✓\n\n\nANGEL2\n✗\n✓\n\n\nANKRD24\n✓\n✗\n\n\nANKRD26\n✗\n✗\n\n\nAPBA3\n✓\n✗\n\n\nAPOBEC3Z1\n✓\n✗\n\n\nAPOH\n✗\n✓\n\n\nARHGAP23\n✓\n✗\n\n\nARHGEF26\n✗\n✗\n\n\nARRDC5\n✓\n✗\n\n\nARSG\n✗\n✓\n\n\nASCL2\n✗\n✓\n\n\nATCAY\n✓\n✗\n\n\nATF3\n✗\n✓\n\n\nATP5MC1\n✓\n✗\n\n\nATP9A\n✗\n✓\n\n\nATXN7L1\n✗\n✓\n\n\nAXIN2\n✗\n✓\n\n\nB4GALNT2\n✓\n✗\n\n\nB4GALT5\n✗\n✓\n\n\nBATF3\n✗\n✓\n\n\nBCAS4\n✗\n✓\n\n\nBPTF\n✗\n✓\n\n\nBSDC1\n✗\n✓\n\n\nC1H19orf33\n✗\n✗\n\n\nC20H19orf71\n✓\n✗\n\n\nC20H19orf77\n✓\n✗\n\n\nC8H14orf180\n✗\n✗\n\n\nC9H17orf58\n✗\n✓\n\n\nC9H17orf98\n✓\n✗\n\n\nCACNG1\n✗\n✓\n\n\nCACNG4\n✗\n✓\n\n\nCACNG5\n✗\n✓\n\n\nCACTIN\n✓\n✗\n\n\nCALM1\n✗\n✓\n\n\nCARD8\n✗\n✗\n\n\nCBD107\n✗\n✗\n\n\nCBLIF\n✗\n✗\n\n\nCCDC47\n✗\n✓\n\n\n\n\n\n\n\n\ngene\nhap1\nhap2\n\n\n\n\nAAGAB\n✓\n✗\n\n\nAANAT\n✗\n✓\n\n\nAATK\n✗\n✓\n\n\nABCD1\n✓\n✗\n\n\nABCG2_1\n✗\n✗\n\n\nABTB2\n✓\n✗\n\n\nACE2\n✓\n✗\n\n\nACOT8\n✓\n✗\n\n\nACOT9\n✓\n✗\n\n\nACP2\n✓\n✗\n\n\nACP7\n✓\n✗\n\n\nACSL4\n✓\n✗\n\n\nACTG1\n✗\n✓\n\n\nADCY2\n✗\n✗\n\n\nADCY5\n✗\n✗\n\n\nADGRB1\n✗\n✓\n\n\nADGRG2\n✓\n✗\n\n\nADGRG4\n✓\n✗\n\n\nAFF2\n✓\n✗\n\n\nAGBL2\n✓\n✗\n\n\nAGTR2\n✓\n✗\n\n\nAIFM1\n✓\n✗\n\n\nAKAP14\n✓\n✗\n\n\nAKAP4\n✓\n✗\n\n\nALAS2\n✓\n✗\n\n\nALKBH3\n✓\n✗\n\n\nAMBRA1\n✓\n✗\n\n\nAMELX\n✗\n✓\n\n\nAMMECR1\n✓\n✗\n\n\nAMOT\n✓\n✗\n\n\nANO9\n✓\n✗\n\n\nAP1S2\n✓\n✗\n\n\nAPEX2\n✓\n✗\n\n\nAPI5\n✓\n✗\n\n\nAPLN\n✓\n✗\n\n\nAPLNR\n✓\n✗\n\n\nAPOOL\n✓\n✗\n\n\nAR\n✓\n✗\n\n\nARC\n✗\n✓\n\n\nARFGEF2\n✓\n✗\n\n\nARHGAP1\n✓\n✗\n\n\nARHGAP36\n✓\n✗\n\n\nARHGAP4\n✓\n✗\n\n\nARHGAP6\n✗\n✓\n\n\nARHGEF26\n✗\n✗\n\n\nARHGEF6\n✓\n✗\n\n\nARHGEF9\n✗\n✓\n\n\nARL13A\n✓\n✗\n\n\nARMCX1\n✓\n✗\n\n\nARMCX2\n✓\n✗\n\n\n\n\n\n\n\n\ngene\nhap1\nhap2\n\n\n\n\nAADAC\n✗\n✓\n\n\nAADACL2\n✗\n✓\n\n\nABCG2_2\n✗\n✗\n\n\nADCY2\n✗\n✗\n\n\nADCY5\n✗\n✗\n\n\nADGRB1\n✗\n✓\n\n\nADSS1\n✓\n✗\n\n\nAGTRAP\n✗\n✓\n\n\nAHNAK2\n✓\n✗\n\n\nALG12\n✓\n✗\n\n\nAMH\n✓\n✗\n\n\nANGPTL7\n✗\n✓\n\n\nANKRD24\n✓\n✗\n\n\nAPBA3\n✓\n✗\n\n\nARC\n✗\n✓\n\n\nARHGEF1\n✗\n✓\n\n\nARHGEF26\n✗\n✗\n\n\nASPG\n✓\n✗\n\n\nATCAY\n✓\n✗\n\n\nATP13A1\n✓\n✗\n\n\nATP1A3\n✗\n✓\n\n\nB3GNT8\n✗\n✓\n\n\nB9D2\n✗\n✓\n\n\nBCKDHA\n✗\n✓\n\n\nBEGAIN\n✗\n✓\n\n\nBRD1\n✓\n✗\n\n\nBRF1\n✓\n✗\n\n\nBSDC1\n✗\n✓\n\n\nBTBD6\n✓\n✗\n\n\nC17H2orf16\n✓\n✗\n\n\nC1H19orf33\n✗\n✓\n\n\nC20H19orf71\n✓\n✗\n\n\nC20H19orf77\n✓\n✗\n\n\nC2H1orf167\n✗\n✓\n\n\nC8H14orf180\n✓\n✗\n\n\nCACTIN\n✓\n✗\n\n\nCALM1\n✗\n✗\n\n\nCARD8\n✗\n✗\n\n\nCBD107\n✗\n✗\n\n\nCCDC97\n✗\n✓\n\n\nCCZ1\n✗\n✗\n\n\nCD302_2\n✗\n✗\n\n\nCD79A\n✗\n✓\n\n\nCDCA4\n✓\n✗\n\n\nCDX4\n✗\n✗\n\n\nCELF5\n✓\n✗\n\n\nCEP170B\n✓\n✗\n\n\nCFAP299\n✗\n✗\n\n\nCHAF1A\n✓\n✗\n\n\nCLBA1\n✓\n✗\n\n\n\n\n\n\n\n\ngene\nhap1\nhap2\n\n\n\n\nA1CF\n✗\n✓\n\n\nAAMP\n✓\n✗\n\n\nAANAT\n✓\n✗\n\n\nAAR2\n✓\n✗\n\n\nAATK\n✓\n✗\n\n\nABCB6\n✓\n✗\n\n\nABCB8\n✓\n✗\n\n\nABCC2\n✓\n✗\n\n\nABCD1\n✗\n✓\n\n\nABCG2_1\n✓\n✗\n\n\nABCG2_2\n✗\n✓\n\n\nABI1\n✓\n✗\n\n\nACBD4\n✓\n✗\n\n\nACBD5\n✓\n✗\n\n\nACD\n✓\n✗\n\n\nACE\n✓\n✗\n\n\nACE2\n✗\n✓\n\n\nACOT9\n✗\n✓\n\n\nACSL4\n✗\n✓\n\n\nACSS2\n✓\n✗\n\n\nACTG1\n✓\n✗\n\n\nACTL10\n✓\n✗\n\n\nACTN3\n✓\n✗\n\n\nACVR1B\n✓\n✗\n\n\nACVRL1\n✓\n✗\n\n\nACY3\n✓\n✗\n\n\nADAM11\n✓\n✗\n\n\nADAM33\n✓\n✗\n\n\nADAMTS4\n✓\n✗\n\n\nADCY1\n✓\n✗\n\n\nADCY2\n✗\n✗\n\n\nADCY5\n✗\n✗\n\n\nADCY6\n✓\n✗\n\n\nADGRA2\n✓\n✗\n\n\nADGRD1\n✗\n✓\n\n\nADGRG2\n✗\n✓\n\n\nADGRG4\n✗\n✓\n\n\nADRA1D\n✓\n✗\n\n\nADRB3\n✓\n✗\n\n\nAEBP1\n✓\n✗\n\n\nAFF2\n✗\n✓\n\n\nAFF4\n✓\n✗\n\n\nAFMID\n✓\n✗\n\n\nAGBL3\n✓\n✗\n\n\nAGRP\n✓\n✗\n\n\nAGTR2\n✗\n✓\n\n\nAHCY\n✓\n✗\n\n\nAIFM1\n✗\n✓\n\n\nAIP\n✓\n✗\n\n\nAKAP14\n✗\n✓\n\n\n\n\n\n\n\n\ngene\nhap1\nhap2\n\n\n\n\nAACS\n✗\n✓\n\n\nAATK\n✗\n✓\n\n\nABCB9\n✗\n✓\n\n\nABCD1\n✓\n✗\n\n\nABCG2_2\n✗\n✗\n\n\nABHD16B\n✓\n✗\n\n\nACACB\n✗\n✓\n\n\nACAD10\n✗\n✓\n\n\nACADS\n✗\n✓\n\n\nACBD3\n✗\n✓\n\n\nACE2\n✓\n✗\n\n\nACOT9\n✓\n✗\n\n\nACSL4\n✗\n✓\n\n\nACTG1\n✗\n✓\n\n\nADAM15\n✗\n✓\n\n\nADAR\n✗\n✓\n\n\nADCY2\n✗\n✗\n\n\nADCY5\n✗\n✗\n\n\nADGRD1\n✗\n✓\n\n\nADGRG2\n✓\n✗\n\n\nADGRG4\n✓\n✗\n\n\nADORA2A\n✗\n✓\n\n\nAEBP1\n✓\n✗\n\n\nAFF2\n✓\n✗\n\n\nAGTR2\n✓\n✗\n\n\nAIFM1\n✓\n✗\n\n\nAKAP14\n✓\n✗\n\n\nAKAP4\n✓\n✗\n\n\nAKIRIN1\n✗\n✓\n\n\nALAS2\n✓\n✗\n\n\nALDH2\n✗\n✓\n\n\nALKBH6\n✗\n✓\n\n\nAMELX\n✗\n✓\n\n\nAMER1\n✗\n✓\n\n\nAMMECR1\n✗\n✓\n\n\nAMOT\n✗\n✓\n\n\nANAPC5\n✗\n✓\n\n\nANAPC7\n✗\n✓\n\n\nANGPT2\n✗\n✓\n\n\nANHX\n✗\n✓\n\n\nANKLE2\n✗\n✓\n\n\nANKRD13A\n✗\n✓\n\n\nANKRD26\n✓\n✗\n\n\nAP1B1\n✗\n✓\n\n\nAP1S2\n✓\n✗\n\n\nAPEX2\n✓\n✗\n\n\nAPLN\n✓\n✗\n\n\nAPLP1\n✗\n✓\n\n\nAPOOL\n✗\n✓\n\n\nAQP10\n✗\n✓\n\n\n\n\n\n\n\n\n5.2.0.2 Enriched GO terms among unmapped genes across all dogs / haplotypes\n\n\n\n\n\n\n\n\nset\nAppa-hap1\nAppa-hap2\nMolly-hap1\nMolly-hap2\nNoodle-hap1\nNoodle-hap2\nOrfhlaith-hap1\nOrfhlaith-hap2\nPandan-hap1\nPandan-hap2\nZeke-hap1\nZeke-hap2\n\n\ndesc\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCCR6 chemokine receptor binding\n\n\n\n\n\n\n\n\n\n\n✗\n\n\n\nG protein-coupled receptor signaling pathway\n\n\n✗\n✗\n✗\n\n✗\n✗\n\n\n\n\n\n\nUDP-glycosyltransferase activity\n\n\n\n\n\n\n\n\n\n✗\n✗\n\n\n\nantigen processing and presentation of lipid antigen via MHC class Ib\n\n\n\n\n\n\n\n\n\n✗\n\n\n\n\nantigen processing and presentation, endogenous lipid antigen via MHC class Ib\n\n\n\n\n\n\n\n\n\n✗\n\n\n\n\nantigen processing and presentation, exogenous lipid antigen via MHC class Ib\n\n\n\n\n\n\n\n\n\n✗\n\n\n\n\ncarboxylic acid catabolic process\n\n\n\n\n\n\n✗\n\n\n\n\n\n\n\nchemoattractant activity\n\n\n\n\n\n\n\n\n\n\n✗\n\n\n\nfatty acid alpha-oxidation\n✗\n\n✗\n✗\n✗\n✗\n✗\n✗\n✗\n✗\n✗\n✗\n\n\nfatty acid catabolic process\n✗\n\n✗\n✗\n✗\n\n✗\n✗\n\n\n\n\n\n\nfatty acid oxidation\n✗\n\n✗\n✗\n✗\n\n✗\n✗\n\n✗\n\n\n\n\nintracellular iron ion homeostasis\n✗\n\n\n\n\n\n\n\n\n\n\n\n\n\nlipid catabolic process\n✗\n\n✗\n\n✗\n\n✗\n✗\n\n\n\n\n\n\nlipid modification\n✗\n\n\n\n\n\n\n\n\n\n\n\n\n\nlipid oxidation\n✗\n\n✗\n✗\n✗\n\n✗\n✗\n\n✗\n\n\n\n\nmineralocorticoid metabolic process\n\n\n\n\n✗\n\n\n\n\n\n\n\n\n\nmonocarboxylic acid catabolic process\n✗\n\n✗\n✗\n✗\n\n✗\n✗\n\n\n\n\n\n\nnegative regulation of DNA-templated transcription\n\n✗\n\n\n\n✗\n\n\n✗\n\n\n✗\n\n\nnegative regulation of RNA biosynthetic process\n\n✗\n\n\n\n✗\n\n\n✗\n\n\n✗\n\n\nnegative regulation of RNA metabolic process\n\n✗\n\n\n\n✗\n\n\n✗\n\n\n✗\n\n\nnegative regulation of biosynthetic process\n\n✗\n\n\n\n✗\n\n\n✗\n\n\n✗\n\n\nnegative regulation of macromolecule biosynthetic process\n\n✗\n\n\n\n✗\n\n\n✗\n\n\n✗\n\n\nnegative regulation of macromolecule metabolic process\n\n✗\n\n\n\n✗\n\n\n✗\n\n\n✗\n\n\nnegative regulation of metabolic process\n\n✗\n\n\n\n✗\n\n\n✗\n\n\n✗\n\n\nnegative regulation of nucleobase-containing compound metabolic process\n\n✗\n\n\n\n✗\n\n\n✗\n\n\n✗\n\n\nnegative regulation of transcription by RNA polymerase II\n✗\n✗\n\n\n\n✗\n\n\n✗\n\n\n✗\n\n\nolefinic compound biosynthetic process\n\n\n\n\n✗\n\n\n\n\n\n\n\n\n\nolfactory receptor activity\n\n\n\n✗\n\n\n\n✗\n\n\n\n\n\n\norganic acid catabolic process\n\n\n\n\n\n\n✗\n\n\n\n\n\n\n\noxidative demethylation\n\n\n\n✗\n\n\n\n\n\n\n\n\n\n\noxidoreductase activity, acting on paired donors, with incorporation or reduction of molecular oxygen\n\n\n\n\n\n\n\n\n\n✗\n\n\n\n\nphytanoyl-CoA dioxygenase activity\n\n\n\n✗\n\n\n\n✗\n\n✗\n✗\n\n\n\npoly(U) RNA binding\n\n\n\n\n\n\n\n\n\n\n✗\n\n\n\npoly-pyrimidine tract binding\n\n\n\n\n\n\n\n\n\n\n✗\n\n\n\nprotein deubiquitination\n\n\n✗\n\n\n\n\n\n\n\n\n\n\n\nprotein modification by small protein removal\n\n\n✗\n\n\n\n\n\n\n\n\n\n\n\nprotein-DNA complex organization\n\n✗\n\n\n\n\n\n\n\n\n\n\n\n\nsteroid metabolic process\n✗\n\n✗\n✗\n✗\n\n✗\n✗\n\n✗",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Genome Annotation Transfer (Liftoff)</span>"
    ]
  }
]