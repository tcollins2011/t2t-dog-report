{
  "hash": "211e94ee7d4bb2c80ea919f8244f2b9c",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Scaffold Assemblies (RagTag)\"\ndescription: \"Chromosome-scale continuity and gap statistics after reference scaffolding\"\nformat:\n  html:\n    toc: true\n    code-fold: show\n    df-print: paged\nexecute:\n  echo: true\n  warning: false\n  message: false\n---\n\n## What this chapter shows\n\nWe summarise **scaffold-level** assemblies produced with **RagTag** using *GSD v1.0* as the reference.  \nFigures mirror those in **02 Assemblies** so you can see before-versus-after gains in continuity.\n\n> Expected dog genome size ≈ **2.45 Gb** (2.4–2.5 Gb).  \n> Ideal assembly has **39–40 scaffolds** (38 autosomes + X/Y).\n\n---\n\n## Summary Table\n\nThe `*.scaf.stats.tsv` files are single-line outputs from RagTag.  \nThey live in `data/scaffold/` along with the `.scaf.fa.lens` length files.\n\n::: {#8058bcf2 .cell results='show' execution_count=1}\n``` {.python .cell-code}\nimport glob, re, sys, pathlib, pandas as pd, numpy as np\nfrom IPython.display import display\nimport matplotlib.pyplot as plt\n\nSTAT_DIR = pathlib.Path(\"data/scaffold\")\nstat_files = glob.glob(str(STAT_DIR / \"*.scaf.stats.tsv\"))\nif not stat_files:\n    sys.exit(f\"[ERROR] No scaffold stats found in {STAT_DIR}\")\n\nPAT = re.compile(rf\"{STAT_DIR}/([A-Za-z]+)_(primary|hap1|hap2)\\.scaf\\.stats\\.tsv$\")\n\nrecords = []\nfor f in stat_files:\n    m = PAT.match(f)\n    if not m:\n        continue\n    dog, asm = m.groups()\n    with open(f) as fh:\n        kv = dict(re.findall(r\"(\\w+)=([\\d.]+)\", fh.readline()))\n    records.append(dict(\n        dog      = dog.title(),\n        assembly = asm,\n        sum      = int(kv[\"sum\"]),\n        n50      = int(kv[\"n50\"]),\n        Ns       = int(kv.get(\"Ns\", 0)),\n        gaps     = int(kv.get(\"gaps\", 0))\n    ))\n\nscaf = pd.DataFrame(records)\nscaf[\"assembly\"]  = pd.Categorical(scaf[\"assembly\"], [\"primary\",\"hap1\",\"hap2\"], ordered=True)\nscaf[\"length_Gb\"] = scaf[\"sum\"]/1e9\nscaf[\"N50_Mb\"]    = scaf[\"n50\"]/1e6\nscaf[\"Ns_pct\"]    = 100*scaf[\"Ns\"]/scaf[\"sum\"]\nscaf = scaf.sort_values([\"dog\",\"assembly\"])\n\ntbl = (scaf[[\"dog\",\"assembly\",\"length_Gb\",\"N50_Mb\",\"gaps\",\"Ns_pct\"]]\n       .round({\"length_Gb\":2,\"N50_Mb\":1,\"Ns_pct\":2})\n       .rename(columns={\"length_Gb\":\"length (Gb)\",\"N50_Mb\":\"N50 (Mb)\",\n                        \"gaps\":\"# gaps\",\"Ns_pct\":\"% N\"}))\ndisplay(tbl)\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>dog</th>\n      <th>assembly</th>\n      <th>length (Gb)</th>\n      <th>N50 (Mb)</th>\n      <th># gaps</th>\n      <th>% N</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>12</th>\n      <td>Appa</td>\n      <td>primary</td>\n      <td>2.47</td>\n      <td>66.1</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>Appa</td>\n      <td>hap1</td>\n      <td>2.42</td>\n      <td>65.7</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Appa</td>\n      <td>hap2</td>\n      <td>2.37</td>\n      <td>64.0</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>Molly</td>\n      <td>primary</td>\n      <td>2.47</td>\n      <td>66.0</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Molly</td>\n      <td>hap1</td>\n      <td>2.43</td>\n      <td>65.8</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>Molly</td>\n      <td>hap2</td>\n      <td>2.45</td>\n      <td>65.6</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>Noodle</td>\n      <td>primary</td>\n      <td>2.47</td>\n      <td>65.7</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>Noodle</td>\n      <td>hap1</td>\n      <td>2.45</td>\n      <td>65.7</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>Noodle</td>\n      <td>hap2</td>\n      <td>2.32</td>\n      <td>63.6</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Orfhlaith</td>\n      <td>primary</td>\n      <td>2.47</td>\n      <td>65.7</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Orfhlaith</td>\n      <td>hap1</td>\n      <td>2.44</td>\n      <td>64.4</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>Orfhlaith</td>\n      <td>hap2</td>\n      <td>2.45</td>\n      <td>65.5</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Pandan</td>\n      <td>primary</td>\n      <td>2.47</td>\n      <td>65.6</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>Pandan</td>\n      <td>hap1</td>\n      <td>2.32</td>\n      <td>64.7</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Pandan</td>\n      <td>hap2</td>\n      <td>2.37</td>\n      <td>65.5</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>Zeke</td>\n      <td>primary</td>\n      <td>2.47</td>\n      <td>66.1</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Zeke</td>\n      <td>hap1</td>\n      <td>2.36</td>\n      <td>64.6</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>Zeke</td>\n      <td>hap2</td>\n      <td>2.37</td>\n      <td>63.0</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Headline continuity plots \n\n::: {#1e472017 .cell execution_count=2}\n``` {.python .cell-code}\nimport numpy as np, seaborn as sns\nwanted = [\"primary\",\"hap1\",\"hap2\"]\n\n# --- Bar: Scaffold N50 ------------------------------------------------\nfig, ax = plt.subplots(figsize=(8,4))\npivot = (scaf.pivot(index=\"dog\", columns=\"assembly\", values=\"N50_Mb\")\n              .reindex(sorted(scaf[\"dog\"].unique()))\n              .reindex(columns=wanted))\nx = np.arange(len(pivot)); w = 0.27\nfor i, col in enumerate(pivot.columns):\n    ax.bar(x+i*w, pivot[col], width=w, label=col)\nax.set_xticks(x+w); ax.set_xticklabels(pivot.index)\nax.set_ylabel(\"Scaffold N50 (Mb)\")\nax.set_title(\"Scaffold N50 by dog and haplotype\")\nax.legend(); plt.tight_layout(); plt.show()\n\n# --- Bar: Total scaffold length vs 2.45 Gb ---------------------------\nfig, ax = plt.subplots(figsize=(8,4))\npivot = (scaf.pivot(index=\"dog\", columns=\"assembly\", values=\"length_Gb\")\n              .reindex(sorted(scaf[\"dog\"].unique()))\n              .reindex(columns=wanted))\nfor i, col in enumerate(pivot.columns):\n    ax.bar(x+i*w, pivot[col], width=w, label=col)\nax.axhline(2.45, ls=\"--\", color=\"grey\")\nax.set_xticks(x+w); ax.set_xticklabels(pivot.index)\nax.set_ylabel(\"Scaffolded length (Gb)\")\nax.set_title(\"Total scaffold length vs expected genome size (2.45 Gb)\")\nax.legend(); plt.tight_layout(); plt.show()\n\n#| label: cumulative-length\n#| results: \"show\"\n# ---- Cumulative-length (lens) plots for scaffolds --------------------\nimport glob, re, math, pandas as pd, matplotlib.pyplot as plt\n\ndef load_lens(path):\n    df = pd.read_csv(path, sep=r\"\\s+\", header=None, names=[\"len\"])\n    df = df.sort_values(\"len\", ascending=False).reset_index(drop=True)\n    df[\"cum\"] = df[\"len\"].cumsum()\n    return df\n\nLENS_DIR   = \"data/scaffold\"\nlens_files = sorted(\n    glob.glob(f\"{LENS_DIR}/*_primary.scaf.fa.lens\") +\n    glob.glob(f\"{LENS_DIR}/*_hap1.scaf.fa.lens\")   +\n    glob.glob(f\"{LENS_DIR}/*_hap2.scaf.fa.lens\")\n)\n\nif lens_files:\n    ncols  = 3\n    nrows  = math.ceil(len(lens_files) / ncols)\n    fig, axes = plt.subplots(nrows=nrows, ncols=ncols,\n                             figsize=(12, 3 * nrows), squeeze=False)\n\n    for ax, f in zip(axes.flatten(), lens_files):\n        m = re.match(r\".*/([A-Za-z0-9_-]+)_(primary|hap1|hap2)\\.scaf\\.fa\\.lens\", f)\n        if not m:        # unexpected filename\n            ax.axis(\"off\"); ax.set_title(f\"Unrecognized: {f}\")\n            continue\n        dog, asm = m.group(1).title(), m.group(2)\n        df  = load_lens(f)\n        tot = df[\"len\"].sum()\n\n        ax.plot(range(1, len(df) + 1), df[\"cum\"] / 1e9)\n        ax.axhline(tot * 0.5 / 1e9, ls=\"--\")        # 50 % line\n        ax.set_title(f\"{dog} {asm}\")\n        ax.set_xlabel(\"# scaffolds (sorted)\")\n        ax.set_ylabel(\"Cumulative length (Gb)\")\n\n    # Hide any empty subplots\n    for extra_ax in axes.flatten()[len(lens_files):]:\n        extra_ax.axis(\"off\")\n\n    plt.tight_layout(); plt.show()\nelse:\n    print(\"No *.scaf.fa.lens files found in data/scaffold/\")\n```\n\n::: {.cell-output .cell-output-display}\n![](03_scaffolding_files/figure-html/cell-3-output-1.png){width=757 height=373}\n:::\n\n::: {.cell-output .cell-output-display}\n![](03_scaffolding_files/figure-html/cell-3-output-2.png){width=757 height=373}\n:::\n\n::: {.cell-output .cell-output-display}\n![](03_scaffolding_files/figure-html/cell-3-output-3.png){width=1141 height=1716}\n:::\n:::\n\n\n## Nx curves and area-under-Nx (auN)\n\n::: {#a9ec3730 .cell execution_count=3}\n``` {.python .cell-code}\nimport math, numpy as np\n\ndef load_lens(path):\n    arr = np.loadtxt(path, dtype=int)\n    return np.sort(arr)[::-1]\n\ndef nx_curve(arr):\n    cs, tot = arr.cumsum(), arr.sum()\n    return np.array([arr[cs >= tot*x/100][0] for x in range(1,101)])\n\nLENS_DIR  = STAT_DIR\nlens_files = sorted(glob.glob(str(LENS_DIR / \"*.scaf.fa.lens\")))\ncurves, summary = [], []\nfor f in lens_files:\n    m = re.match(r\".*/([A-Za-z]+)_(primary|hap1|hap2)\\.scaf\\.fa\\.lens\", f)\n    if not m: continue\n    dog, asm = m.groups(); dog = dog.title()\n    arr = load_lens(f); nx = nx_curve(arr)\n    curves.append((dog, asm, nx))\n    summary.append({\"dog\":dog,\"assembly\":asm,\"auN_Mb\":nx.sum()/100/1e6})\n\n# split dogs into two groups for legible plots\ndogs = sorted({d for d,_,_ in curves}); mid=len(dogs)//2\nfor group, dset in enumerate([dogs[:mid], dogs[mid:]], start=1):\n    plt.figure(figsize=(7,5))\n    for dog, asm, nx in curves:\n        if dog not in dset: continue\n        ls = \"-\" if asm==\"primary\" else \"--\" if asm==\"hap1\" else \":\"\n        plt.plot(range(1,101), nx/1e6, ls, label=f\"{dog} {asm}\")\n    plt.xlabel(\"x in Nx (%)\"); plt.ylabel(\"Length (Mb)\")\n    plt.title(f\"Nx curves — group {group}/2 (scaffolds)\")\n    plt.legend(fontsize=8, ncol=2); plt.tight_layout(); plt.show()\n\ndisplay(pd.DataFrame(summary)\n        .pivot(index=\"dog\", columns=\"assembly\", values=\"auN_Mb\")\n        .reindex(columns=wanted)\n        .round(1))\n```\n\n::: {.cell-output .cell-output-display}\n![](03_scaffolding_files/figure-html/cell-4-output-1.png){width=661 height=468}\n:::\n\n::: {.cell-output .cell-output-display}\n![](03_scaffolding_files/figure-html/cell-4-output-2.png){width=661 height=468}\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>assembly</th>\n      <th>primary</th>\n      <th>hap1</th>\n      <th>hap2</th>\n    </tr>\n    <tr>\n      <th>dog</th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Appa</th>\n      <td>72.6</td>\n      <td>66.9</td>\n      <td>65.4</td>\n    </tr>\n    <tr>\n      <th>Molly</th>\n      <td>70.2</td>\n      <td>68.7</td>\n      <td>68.2</td>\n    </tr>\n    <tr>\n      <th>Noodle</th>\n      <td>69.6</td>\n      <td>69.5</td>\n      <td>65.3</td>\n    </tr>\n    <tr>\n      <th>Orfhlaith</th>\n      <td>69.7</td>\n      <td>69.3</td>\n      <td>68.8</td>\n    </tr>\n    <tr>\n      <th>Pandan</th>\n      <td>70.4</td>\n      <td>65.8</td>\n      <td>68.1</td>\n    </tr>\n    <tr>\n      <th>Zeke</th>\n      <td>69.4</td>\n      <td>66.1</td>\n      <td>65.5</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n",
    "supporting": [
      "03_scaffolding_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}